g + geom_point(aes(color = drv), labs(title = "Swirl Rules!"), labs( x = "Displacement", y = "Hwy Mileage"))
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs( x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(eas(color = drv)) + theme_bw(base_family = "Times")
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(-3,3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line(ylim(-3,3))
g <- ggplot(testdat, aes(x = myx, y = myy), ylim(-3,3))
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(c(-3,3))
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = Swirl Rules!)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
srt(diamonds)
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom_smooth(method = "lm"))
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = .~cut) + geom_smooth(method = "lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1, length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$car2, cutpoints)
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut~car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut~car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(.~cut())
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies)
library(ggplot2)
qplot(votes, rating, data = movies)
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
plot(as.dendrogram(hc), h=1.5, col = "blue")
abline(h=1.5, col = "blue")
plot(as.dendrogram(hc))
abline(h=1.5, col = "blue")
abline(h=.4,col="red")
5
5
12
abline(h=.05,col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x,y,cx,cy)
apply(distTmp, 2, which.min)
points(x,y, pch=19, cex=2, cols1[newClust])
points(x,y, pch=19, cex=2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x,y, cx,cy)
mdist(x,y, newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y, pch=19, cex=2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
plot(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x,y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col=c("black","red","green"), pch = 3, cex = 3, lwd = 3)
plot(x,y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x,y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x,y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% t(matv)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2[1:2]
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <-
a1 <- (svd1$u[,1] and svd1$d[1])
a1 <- svd1$u[,1] %*% svd1$d[1]
a1 <- (svd1$u[,1] %*% svd1$d[1])
a1<- 1
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
setwd("E:/Coursera Data Science/Course 5/Week 2/Git Files/RepData_PeerAssessment1")
##load libraries
library(dplyr)
ls()
##read data
destfile <- "E:/Coursera Data Science/Course 5/Week 2/Git Files/RepData_PeerAssessment1/activity.zip"
unzip(zipfile = destfile, exdir= "E:/Coursera Data Science/Course 5/Week 2/Git Files/RepData_PeerAssessment1/")
unzip(zipfile = destfile, exdir= "E:/Coursera Data Science/Course 5/Week 2/Git Files/RepData_PeerAssessment1")
##read data
#destfile <- "E:/Coursera Data Science/Course 5/Week 2/Git Files/RepData_PeerAssessment1/activity.zip"
#unzip(zipfile = destfile, exdir= "E:/Coursera Data Science/Course 5/Week 2/Git Files/RepData_PeerAssessment1")
data <- read.csv("E:/Coursera Data Science/Course 5/Week 2/Git Files/RepData_PeerAssessment1/activity.zip/activity.csv")
library(readr)
##read data
#destfile <- "E:/Coursera Data Science/Course 5/Week 2/Git Files/RepData_PeerAssessment1/activity.zip"
#unzip(zipfile = destfile, exdir= "E:/Coursera Data Science/Course 5/Week 2/Git Files/RepData_PeerAssessment1")
data <- read_csv("E:/Coursera Data Science/Course 5/Week 2/Git Files/RepData_PeerAssessment1/activity.zip/activity.csv")
##read data
#destfile <- "E:/Coursera Data Science/Course 5/Week 2/Git Files/RepData_PeerAssessment1/activity.zip"
#unzip(zipfile = destfile, exdir= "E:/Coursera Data Science/Course 5/Week 2/Git Files/RepData_PeerAssessment1")
data <- read_csv("E:/Coursera Data Science/Course 5/Week 2/Git Files/RepData_PeerAssessment1/activity.zip/")
data <- read_csv("E:/Coursera Data Science/Course 5/Week 2/Git Files/RepData_PeerAssessment1/activity.zip")
View(data)
sum(data$steps, na.rm = T)
tail(data)
##read data
data <- read_csv("E:/Coursera Data Science/Course 5/Week 2/Git Files/RepData_PeerAssessment1/activity.zip") %>% as_tibble
data
totalSteps <- data %>% group_by(date) %>% summarise(totalsteps = sum(steps), na.rm = T)
View(totalSteps)
totalSteps <- data %>% group_by(date) %>% summarise(totalsteps = sum(steps))
View(totalSteps)
totalSteps <- data %>%
na.omit() %>%
group_by(date) %>%
summarise(totalsteps = sum(steps))
View(totalSteps)
View(data)
test <- <- data %>%
na.omit()
test <- data %>%
na.omit()
View(test)
rm(test)
g <- ggplot(totalSteps, aes(totalsteps)) +
geom_histogram()
print(g)
g <- ggplot(totalSteps, aes(totalsteps)) +
geom_histogram()
##histogram of the total number of steps taken each day
library(ggplot2)
g <- ggplot(totalSteps, aes(totalsteps)) +
geom_histogram()
print(g)
g <- ggplot(totalSteps, aes(date)) +
geom_histogram()
print(g)
g <- ggplot(totalSteps, aes(date)) +
geom_histogram(binwidth=1)
print(g)
g <- ggplot(totalSteps, aes(date)) +
geom_histogram()
print(g)
View(totalSteps)
class(totalSteps$date)
g <- ggplot(totalSteps, aes(totalsteps)) +
geom_histogram()
print(g)
g <- ggplot(totalSteps, aes(totalsteps)) +
geom_histogram(colour = "#4e81d3") +
xlab("Total daily steps") +
ggtitle("Count of occurances of total daily steps")
print(g)
g <- ggplot(totalSteps, aes(totalsteps)) +
geom_histogram(fill = "#4e81d3") +
xlab("Total daily steps") +
ggtitle("Count of occurances of total daily steps")
print(g)
g <- ggplot(totalSteps, aes(totalsteps)) +
geom_histogram(fill = "#4e81d3", binwidth = 20) +
xlab("Total daily steps") +
ggtitle("Count of occurances of total daily steps")
print(g)
g <- ggplot(totalSteps, aes(totalsteps)) +
geom_histogram(fill = "#4e81d3", binwidth = 500) +
xlab("Total daily steps") +
ggtitle("Count of occurances of total daily steps")
print(g)
Mean(totalSteps$totalsteps)
mean(totalSteps$totalsteps)
median(totalSteps$totalsteps)
View(data)
dayAvg <- data %>%
na.omit() %>%
group_by(interval) %>%
summarise(avg = mean(steps))
View(dayAvg)
g <- ggplot(dayAvg, aes(interval, avg)) +
geom_line()
print(g)
g <- ggplot(dayAvg, aes(interval, avg)) +
geom_line() +
xlab("Interval (5 min increments") +
ylab("Number of steps") +
ggtitle("Average no.steps taken, averaged across days, per 5 min. interval")
print(g)
g <- ggplot(dayAvg, aes(interval, avg)) +
geom_line(colour = "#21ba24") +
xlab("Interval (5 min increments") +
ylab("Number of steps") +
ggtitle("Average no.steps taken, averaged across days, per 5 min. interval")
print(g)
g <- ggplot(dayAvg, aes(interval, avg)) +
geom_line(colour = "#5e20ba") +
xlab("Interval (5 min increments") +
ylab("Number of steps") +
ggtitle("Average no.steps taken, averaged across days, per 5 min. interval")
print(g)
##Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
range(dayAvg$avg)
##Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
max(dayAvg$avg)
dayAvg[maxAvg, 2]
##Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
maxAvg <- max(dayAvg$avg)
dayAvg[maxAvg, 2]
dayAvg[maxAvg, 1]
##Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
#maxAvg <- max(dayAvg$avg)
filter(dayAvg, max(avg))
##Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
#maxAvg <- max(dayAvg$avg)
filter(dayAvg, avg == max(avg))
##Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
filter(dayAvg, avg == max(avg))[,1]
#Calculate and report the total number of missing values in the dataset
sum(is.na(data))
View(data)
sapply(data, function(x) sum(is.na(x))) #by column
View(data)
View(dayAvg)
##Impute missing values using interval mean from all days
test < - inner_merge(data, dayAvg, by=interval)
##Impute missing values using interval mean from all days
test <- inner_merge(data, dayAvg, by=interval)
##Impute missing values using interval mean from all days
test <- full_join(data, dayAvg, by=interval)
##Impute missing values using interval mean from all days
test <- full_join(data, dayAvg, by = "interval")
View(test)
##Impute missing values using interval mean from all days
join <- full_join(data, dayAvg, by = "interval")
library(tidyr)
View(join)
#TEST$UNIT[is.na(TEST$UNIT)] <- as.character(TEST$STATUS[is.na(TEST$UNIT)])
imputed <- join$steps %>% replace_na(join$avg)
#TEST$UNIT[is.na(TEST$UNIT)] <- as.character(TEST$STATUS[is.na(TEST$UNIT)])
#TEST$UNIT[is.na(TEST$UNIT)] <- TEST$STATUS[is.na(TEST$UNIT)]
join$steps[is.na(join$steps)] <- join$avg[is.na(join$steps)]
View(join)
join$imputed <- join$steps == join$avg
View(join)
summary(join$imputed)
sum(is.na(data)) #total
rm(join)
##Impute missing values using interval mean from all days
join <- full_join(data, dayAvg, by = "interval")
#TEST$UNIT[is.na(TEST$UNIT)] <- as.character(TEST$STATUS[is.na(TEST$UNIT)])
#TEST$UNIT[is.na(TEST$UNIT)] <- TEST$STATUS[is.na(TEST$UNIT)]
join$steps[is.na(join$steps)] <- join$avg[is.na(join$steps)]
join$imputed <- join$steps == join$avg
summary(join$imputed)
adjTotSteps <- data %>%
group_by(date) %>%
summarise(totalsteps = sum(steps))
View(adjTotSteps)
adjTotSteps <- join %>%
group_by(date) %>%
summarise(totalsteps = sum(steps))
View(adjTotSteps)
View(adjTotSteps)
g <- ggplot(adjTotSteps, aes(totalsteps)) +
geom_histogram(fill = "#4e81d3", binwidth = 500) +
xlab("Total daily steps") +
ggtitle("Count of occurances of total daily steps, with imputation")
print(g)
g <- ggplot(adjTotSteps, aes(totalsteps)) +
geom_histogram(fill = "#539621", binwidth = 500) +
xlab("Total daily steps") +
ggtitle("Count of occurances of total daily steps, with imputation")
print(g)
##adjusted mean and median
mean(adjTotSteps$totalsteps)
median(adjTotSteps$totalsteps)
mean(adjTotSteps$totalsteps) - mean(totalSteps$totalsteps)
median(adjTotSteps$totalsteps) - median(totalSteps$totalsteps)
##read data
data <- read_csv("E:/Coursera Data Science/Course 5/Week 2/Git Files/RepData_PeerAssessment1/activity.zip") %>% as_tibble
##Calculate and report the total number of missing values in the dataset
sum(is.na(data)) #total
sapply(data, function(x) sum(is.na(x))) #breakdown by column
dayAvg <- data %>%
na.omit() %>%
group_by(interval) %>%
summarise(avg = mean(steps))
##Impute missing values using interval mean from all days
join <- full_join(data, dayAvg, by = "interval")
join$steps[is.na(join$steps)] <- join$avg[is.na(join$steps)]
adjTotSteps <- join %>%
group_by(date) %>%
summarise(totalsteps = sum(steps))
g <- ggplot(adjTotSteps, aes(totalsteps)) +
geom_histogram(fill = "#539621", binwidth = 500) +
xlab("Total daily steps") +
ggtitle("Count of occurances of total daily steps, with imputation")
print(g)
mean(adjTotSteps$totalsteps)
median(adjTotSteps$totalsteps)
mean(adjTotSteps$totalsteps) - mean(totalSteps$totalsteps)
median(adjTotSteps$totalsteps) - median(totalSteps$totalsteps)
totalSteps <- data %>%
na.omit() %>%
group_by(date) %>%
summarise(totalsteps = sum(steps))
mean(adjTotSteps$totalsteps)
median(adjTotSteps$totalsteps)
mean(adjTotSteps$totalsteps) - mean(totalSteps$totalsteps)
median(adjTotSteps$totalsteps) - median(totalSteps$totalsteps)
join$day <- join %>%
weekday(date)
join$day <- join %>%
weekdays(date)
join$day <- join$date %>%
weekdays()
View(join)
library(lubridate)
View(join)
join$wknd <- join %>%
wday()
library(chron)
join$wknd <- join$date %>%
is.weekend()
View(join)
JoinDayAvg <- join %>%
group_by(interval) %>%
summarise(avg = mean(steps))
g <- ggplot(joinDayAvg, aes(interval, avg)) +
geom_line(colour = "#5e20ba") +
xlab("Interval (5 min increments)") +
ylab("Number of steps") +
ggtitle("Average no.steps taken, averaged across days, per 5 min. interval, with imputation")
print(g)
g <- ggplot(JoinDayAvg, aes(interval, avg)) +
geom_line(colour = "#5e20ba") +
xlab("Interval (5 min increments)") +
ylab("Number of steps") +
ggtitle("Average no.steps taken, averaged across days, per 5 min. interval, with imputation")
print(g)
g <- ggplot(JoinDayAvg, aes(interval, avg)) +
geom_line(colour = "#5e20ba") +
facet_grid(rows = wknd)
xlab("Interval (5 min increments)") +
ylab("Number of steps") +
ggtitle("Average no.steps taken, averaged across days, per 5 min. interval, with imputation")
print(g)
g <- ggplot(JoinDayAvg, aes(interval, avg)) +
geom_line(colour = "#5e20ba") +
facet_grid(rows = vars(wknd))
xlab("Interval (5 min increments)") +
ylab("Number of steps") +
ggtitle("Average no.steps taken, averaged across days, per 5 min. interval, with imputation")
print(g)
View(JoinDayAvg)
JoinDayAvg <- join %>%
group_by(interval, wknd) %>%
summarise(avg = mean(steps))
View(JoinDayAvg)
g <- ggplot(JoinDayAvg, aes(interval, avg)) +
geom_line(colour = "#5e20ba") +
facet_grid(rows = vars(wknd))
xlab("Interval (5 min increments)") +
ylab("Number of steps") +
ggtitle("Average no.steps taken, averaged across days, per 5 min. interval, with imputation")
print(g)
g <- ggplot(JoinDayAvg, aes(interval, avg)) +
geom_line(colour = "#5e20ba") +
facet_grid(rows = vars(wknd))
xlab("Interval (5 min increments)") +
ylab("Number of steps") +
ggtitle("Average no.steps taken, averaged across days, per 5 min. interval, with imputation")
print(g)
g <- ggplot(JoinDayAvg, aes(interval, avg)) +
geom_line(colour = "#5e20ba") +
facet_grid(rows = vars(wknd))
xlab("Interval (5 min increments)") +
ylab("Number of steps") +
ggtitle("Average no.steps taken, averaged across days, per 5 min. interval, with imputation")
print(g)
g <- ggplot(JoinDayAvg, aes(interval, avg)) +
geom_line(colour = "#5e20ba") +
facet_grid(rows = vars(wknd)) +
xlab("Interval (5 min increments)") +
ylab("Number of steps") +
ggtitle("Average no.steps taken, averaged across days, per 5 min. interval, with imputation")
print(g)
g <- ggplot(JoinDayAvg, aes(interval, avg)) +
geom_line(colour = "#5e20ba") +
facet_grid(rows = vars(wknd), labeller = c("Weekday", "Weekend")) +
xlab("Interval (5 min increments)") +
ylab("Number of steps") +
ggtitle("Average no.steps taken, averaged across days, per 5 min. interval, with imputation")
print(g)
wkLabs <- c(FALSE = "Weekday", TRUE = "Weekend")
g <- ggplot(JoinDayAvg, aes(interval, avg)) +
geom_line(colour = "#5e20ba") +
facet_grid(rows = vars(wknd)) +
xlab("Interval (5 min increments)") +
ylab("Number of steps") +
ggtitle("Average no.steps taken, averaged across days, per 5 min. interval, with imputation")
print(g)
join$wknd <- ifelse(join$wknd == FALSE, "Weekday", "Weekend")
View(JoinDayAvg)
View(join)
JoinDayAvg <- join %>%
group_by(interval, wknd) %>%
summarise(avg = mean(steps))
View(JoinDayAvg)
g <- ggplot(JoinDayAvg, aes(interval, avg)) +
geom_line(colour = "#5e20ba") +
facet_grid(rows = vars(wknd)) +
xlab("Interval (5 min increments)") +
ylab("Number of steps") +
ggtitle("Average no.steps taken, averaged across days, per 5 min. interval, with imputation")
print(g)
g <- ggplot(JoinDayAvg, aes(interval, avg)) +
geom_line(colour = wknd) +
facet_grid(rows = vars(wknd)) +
xlab("Interval (5 min increments)") +
ylab("Number of steps") +
ggtitle("Average no.steps taken, averaged across days, per 5 min. interval, with imputation")
print(g)
g <- ggplot(JoinDayAvg, aes(interval, avg)) +
geom_line(colour = "wknd") +
facet_grid(rows = vars(wknd)) +
xlab("Interval (5 min increments)") +
ylab("Number of steps") +
ggtitle("Average no.steps taken, averaged across days, per 5 min. interval, with imputation")
print(g)
g <- ggplot(JoinDayAvg, aes(interval, avg)) +
geom_line(aes(colour = wknd)) +
facet_grid(rows = vars(wknd)) +
xlab("Interval (5 min increments)") +
ylab("Number of steps") +
ggtitle("Average no.steps taken, averaged across days, per 5 min. interval, with imputation")
print(g)
g <- ggplot(JoinDayAvg, aes(interval, avg)) +
geom_line(aes(colour = wknd), show.legend=F) +
facet_grid(rows = vars(wknd)) +
xlab("Interval (5 min increments)") +
ylab("Number of steps") +
ggtitle("Average no.steps taken, averaged across days, per 5 min. interval, with imputation")
print(g)
g <- ggplot(JoinDayAvg, aes(interval, avg)) +
geom_line(aes(colour = wknd), show.legend = FALSE) +
facet_grid(rows = vars(wknd)) +
xlab("Interval (5 min increments)") +
ylab("Number of steps") +
ggtitle("Average no.steps taken, averaged across days, per 5 min. interval, with imputation")
print(g)
knit2html()
library(knitr)
knit2html()
knit2html("E:/Coursera Data Science/Course 5/Week 2/Git Files/RepData_PeerAssessment1/PA1_template.Rmd")
